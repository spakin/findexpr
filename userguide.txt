========
findexpr
========

--------------------------------------------------------
given integer inputs and outputs, solve for the function
--------------------------------------------------------

:Author:         Scott Pakin <scott-fexpr@pakin.org>
:Date:           2014-11-02
:Version:        1.0
:Manual section: 1
:Manual group:


Synopsis
========

**findexpr** < *inputfile*


Description
===========

**findexpr** finds a function that maps a list of input integers to an
output integer.  For example, if told that *f*\ (3, 5) = 8, it can
conclude that *f*\ (*a*, *b*) = *a* + *b*.  As a more complex example,
consider the following set of three inputs and one function output:

+---+---+---+----------+
| a | b | c | f(a,b,c) |
+===+===+===+==========+
| 1 | 2 | 3 |    1     |
+---+---+---+----------+
| 1 | 3 | 2 |    2     |
+---+---+---+----------+
| 2 | 1 | 3 |    3     |
+---+---+---+----------+
| 2 | 3 | 1 |    4     |
+---+---+---+----------+
| 3 | 1 | 2 |    5     |
+---+---+---+----------+
| 3 | 2 | 1 |    6     |
+---+---+---+----------+

In this case (provided as ``example1.txt`` in the ``examples``
directory), **findexpr** determines that *f*\ (*a*, *b*, *c*) = *a* -
((floor(*c* / (*b* + 1))) - *a*).

Usage
-----

**findexpr** reads a problem description from the standard input
device.  The minimal input consists of a single input, the symbol
``=>``, and a single output, for example ``6 => 4``.

More complex output begins with a sequence of *key*:*value* pairs and
includes multiple rows of multiple inputs and multiple outputs.  It
can also include comment lines.  The ``example1.txt`` file, alluded to
above, looks like this::

    # Find a function that maps each of the permutations of {1, 2, 3}
    # to a distinct integer in the range {1, ..., 6}.

    unary ops:  - abs
    binary ops: + - * /
    columns: a b c => perm_num

    1 2 3 => 1
    1 3 2 => 2
    2 1 3 => 3
    2 3 1 => 4
    3 1 2 => 5
    3 2 1 => 6

Lines beginning with ``#`` are comments.  There are three
*key*:*value* lines in the above.  The ``unary ops`` line limits
**findexpr**'s selection of unary operators to only negation (``-``)
and absolute value (``abs``).  The ``binary ops`` line limits
**findexpr**'s selection of binary operators to only addition (``+``),
subtraction (``-``), multiplication (``*``), and integer division
(``/``).  The ``columns`` line names the inputs ``a``, ``b``, and
``c`` and the output function ``perm_num``.  The remaining lines map
lists of three inputs to a single output.  That is, *perm_num*\ (1,
2, 3) = 1; *perm_num*\ (1, 3, 2) = 2; and so forth.

The complete set of *key*:*value* pairs is as follows.  Although any
*key*:*value* pair may be omitted, the ones that are included must
appear in the order shown below.

``unary ops``
    List of unary operators to consider.  Must be zero or more of the
    following:

      * ``-``: negation
      * ``abs``: absolute value
      * ``sgn``: sign (a.k.a. signum) function
      * ``not``: Boolean negation

    The default is ``not`` when all inputs and outputs are either
    ``0`` or ``1`` and ``- abs sgn`` otherwise.  Unary operators are
    considered in the order specified.

``binary ops``
    List of binary operators to consider.  Must be zero or more of the
    following:

      * ``+``: addition
      * ``*``: multiplication
      * ``-``: subtraction
      * ``/``: integer division (rounded downwards)
      * ``^``: exponentiation
      * ``mod``: modulus (i.e., remainder after division)
      * ``max``: maximum
      * ``min``: minimum
      * ``and``: Boolean conjunction
      * ``or``: Boolean inclusive disjunction
      * ``xor``: Boolean exclusive disjunction
      * ``nand``: negated Boolean conjunction
      * ``nor``: negated Boolean inclusive disjunction

    The default is ``and or xor nand nor`` when all inputs and outputs
    are either ``0`` or ``1`` and ``+ * - / ^ mod max min`` otherwise.
    Binary operators are considered in the order specified.

``constants``
    List of constant integers to consider (in the order specified)
    along with all of the input values.  The default is ``1``.

``allow reps``
    Whether to allow repetitions of input values and constants.  Must
    be one of the following:

      * ``yes``: Each input value and constant can be used multiple
        times in the target function (e.g., *f*\ (*a*) = *a* + *a*).

      * ``no``: Each input value and constant can be used exactly once.

    The default is ``yes``.

``require all``
    Whether to require all inputs to be used to produce the
    corresponding output.  Must be one of the following:

      * ``yes``: A solution like *f*\ (*a*, *b*, *c*) = *b* - 1 is
        forbidden because *f* ignores *a* and *c*.

      * ``no``: Solutions like *f*\ (*a*, *b*, *c*) = *b* - 1 are
        allowed.

    The default is ``no``.

``solutions``
    The number of alternative solutions to output.  The default is ``1``.

``columns``
    Symbolic names for each input and output column.  Must be of the
    form "*i1* *i2* *i3* ... ``=>`` *o1* *o2* *o3* ...".  The default
    is ``a b c d ... => f1 f2 f3 ...`` of length based on the actual
    number of input and output columns.

The *key*:*value* lines are followed by a number of lines that specify
mappings of inputs to outputs and are of the form "*i1* *i2* *i3*
... ``=>`` *o1* *o2* *o3* ...".  Each line must contain at least one
input and at least one output.  **findexpr** will find one function
for each output column.


Algorithm
---------

**findexpr** takes a brute-force approach to finding the matching
expression.  The algorithm looks roughly like this:

| **for each** output column
|   **for each** *o1* **in** 0 **to** ∞
|     **for each** expression containing exactly *o1* operators
|       **for each** way of populating the expression with the given unary and binary operators
|         **for each** permutation of the input columns
|           *success* = TRUE
|           **for each** row of inputs and single output
|             **if** the expression fails to map the permuted inputs to the outputs **then**
|               *success* = FALSE
|               **break** out of the loop over rows of inputs
|           **if** *success* = TRUE **then**
|             output the solution
|             **break** out of the loop on *o1*

Because of this very deep loop next, **findexpr** can take an
extremely long time to run.  To improve performance on multicore
systems, the fourth loop (the one over unary and binary operators) is
parallelized.


Options
=======

**findexpr** does not accept any command-line options.  It simply
reads from the standard input device and writes to the standard output
device.


Examples
========

Binary operators
----------------

This input deck is trivial to solve by inspection::

    1 2 => 3
    2 3 => 5
    3 4 => 7
    4 5 => 9

Not surprisingly, **findexpr** finds the expected ``f1(a,b) = a + b``.
But what if we change *f1*\ (4, 5) from 9 to 6::

    1 2 => 3
    2 3 => 5
    3 4 => 7
    4 5 => 6

In this case, **findexpr** finds the far less obvious ``f1(a,b) =
((max((1 - a) ^ a, a)) mod b) + b``.

Now suppose that we want to prohibit **findexpr** from using ``max``
and ``min``.  We can do this by specifying all of the remaining binary
operators::

    binary ops: + * - / ^ mod

    1 2 => 3
    2 3 => 5
    3 4 => 7
    4 5 => 6

This restriction makes **findexpr** work a little harder, but it
eventually finds that ``f1(a,b) = ((a ^ (a + b)) mod (a + b)) + b``.

Let's challenge **findexpr** even further by additionally
prohibiting the use of ``mod``::

    binary ops: + * - / ^

    1 2 => 3
    2 3 => 5
    3 4 => 7
    4 5 => 6

**findexpr** comes up with a substantially different solution this
time: ``f1(a,b) = b + (a ^ (floor((1 + (1 + 1)) / a)))`` (which one
could simplify to ``f1(a,b) = b + (a ^ (floor(3 / a)))``).  Note that
the division sign in the ``binary ops`` list is output as ``floor(``\
… ``/`` …\ ``)`` to emphasize that ``/`` represents integer division,
not real-number division.


Allow reps and require all
--------------------------

To clarify the roles of the ``allow reps`` and ``require all`` keys,
consider finding an *f* such that *f*\ (1, 2, 3, 4) = 24.  We base our
examination on the following input deck::

    constants:
    allow reps: yes
    require all: no
    columns: 1 2 3 4 => f

    1 2 3 4 => 24

We evaluate all combinations of ``allow reps`` and ``require all`` and
tabulate the results:

==========  ===========  =================
allow reps  require all  *f*\ (1,2,3,4)
==========  ===========  =================
no          no           (4 * 3) * 2
no          yes          ((1 + 2) + 3) * 4
yes         no           (2 + 4) * 4
yes         yes          ((1 + 2) + 3) * 4
==========  ===========  =================


Boolean expressions
-------------------

Although non-brute-force solutions exist for Boolean expressions,
**findexpr** can nevertheless handle such inputs, albeit slower::

    0 0 => 1
    0 1 => 0
    1 0 => 0
    1 1 => 1

Because all of the inputs and all of the outputs are in the set {0,
1}, **findexpr** searches for a Boolean function and finds ``f1(a,b) =
(a xor b) xor 1``.  If this is not what was desired, **findexpr** can
be instructed to consider only non-Boolean unary and binary operators
in its search::

    unary ops: - abs sgn
    binary ops: + * - / ^ mod max min

    0 0 => 1
    0 1 => 0
    1 0 => 0
    1 1 => 1

**findexpr** now finds a completely different solution:
``f1(a,b) = ((a + a) ^ b) - a``.


Speeding up complex queries
---------------------------

Let's get **findexpr** to find an *f*\ (*x*) that satisfies the
following table:

=== ==========
*x* *f*\ (*x*)
=== ==========
 0      6
 1      6
 2      7
 3      7
 4      5
 5      5
 6      6
 7      6
 8      7
 9      7
10      5
11      5
=== ==========

Our first attempt is simply to pass **findexpr** the table data and
nothing else::

     0 => 6
     1 => 6
     2 => 7
     3 => 7
     4 => 5
     5 => 5
     6 => 6
     7 => 6
     8 => 7
     9 => 7
    10 => 5
    11 => 5

Unfortunately, it looks like this is going to take a long, long time
to run.  Let's cancel this run and try to speed it up a bit.  First,
let's hypothesize that we don't need any of the default unary
operators (``-``, ``abs``, and ``sgn``) because the inputs and outputs
are all positive.  We also observe the cyclic nature of the outputs as
a function of the inputs, which increase steadily by 1, and
hypothesize that we need ``mod``, perhaps ``+``, ``*``, ``-``, and/or
``/`` but probably not ``^``, ``max`` or ``min``.  We explicitly
specify the unary and binary operators to consider and in decreasing
order of likelihood of being used::

    unary ops:
    binary ops: mod + * - /
    columns: x => f

     0 => 6
     1 => 6
     2 => 7
     3 => 7
     4 => 5
     5 => 5
     6 => 6
     7 => 6
     8 => 7
     9 => 7
    10 => 5
    11 => 5

(The ``columns`` line is there for aesthetic purposes, to get output
in terms of ``f(x)`` instead of ``f1(a)``.)

This run is still slow.  Let's cancel it and try something else to
reduce execution time.  We note that the default set of constants
includes only 1.  Consequently, all other constants have to be
constructed from multiple 1s.  This increases the minimum number of
operators needed to produce the target expression:

========  =============================  =========
Constant  Expression                     Operators
========  =============================  =========
    1     1                                  0
    2     1 + 1                              1
    3     (1 + 1) + 1                        2
    4     ((1 + 1) + 1) + 1                  3
    5     (((1 + 1) + 1) + 1) + 1            4
    6     (1 + 1) * ((1 + 1) + 1)            4
    7     ((1 + (1 + 1)) * (1 + 1)) + 1      5
    8     (1 + 1) ^ ((1 + 1) + 1)            4
    9     (1 + (1 + 1)) ^ (1 + 1)            4
   10     ((1 + (1 + 1)) ^ (1 + 1)) + 1      5
========  =============================  =========

An increase in operator count increases the number of trips through
the second (*o1*) loop in the algorithm presented above under
`Algorithm`_.  This is problematic because the trip count of the third
loop is an *exponential* function of *o1*.  (Specifically, it follows
the `Schroeder sequence
<http://en.wikipedia.org/wiki/Schroeder_number>`_.)  Consequently, a
reduction in operator counts can result in a substantial savings in
execution time.

We can therefore provide **findexpr** with some constants to utilize.
The exact number to provide represents a balancing act: too few, and
**findexpr** will have to make too many passes through the third loop;
too many, and **findexpr** will have to make too many passes through
the fifth loop.  The fifth loop iterates over permutations of
inputs—constants count as inputs—so its trip count is therefore
*factorial* in the number of constants.  Let's try specifying 1 and
all the prime numbers from 2 through just beyond the maximum value
seen in the output column (7): {1, 2, 3, 5, 7, 11}.  Prime numbers
combine with relatively few operators to make new constants.  In fact,
while the preceding table needs five operators just to produce the
constant 7, using {1, 2, 3, 5, 7, 11} takes us to 520 before five
operators are needed:

========  ===============================  =========
Constant  Expression                       Operators
========  ===============================  =========
    1     1                                    0
    2     2                                    0
    3     3                                    0
    4     1 + 3                                1
    5     5                                    0
    6     1 + 5                                1
    7     7                                    0
    8     1 + 7                                1
    9     2 + 7                                1
   10     3 + 7                                1
    ⋯     ⋯                                    ⋯
  520     floor((floor((5 ^ 5) / 2)) / 3)      5
========  ===============================  =========

Let's try {1, 2, 3, 5, 7, 11}—and without specifying ``unary ops`` or
``binary ops``, as those didn't seem to improve performance in our
example::

    constants: 1 2 3 5 7 11
    columns: x => f

     0 => 6
     1 => 6
     2 => 7
     3 => 7
     4 => 5
     5 => 5
     6 => 6
     7 => 6
     8 => 7
     9 => 7
    10 => 5
    11 => 5

This produces the result ``f(x) = ((floor((x + 2) / 2)) mod 3) + 5``
in a matter of seconds!


Notes
=====

**findexpr** makes no attempt to simplify the expressions it finds.
If expression simplification is desired, one free tool that can reduce
expressions is the `Maxima computer algebra system
<http://maxima.sourceforge.net/>`_.  For example, the following is how
Maxima reduces the output from the first example in this document::

    (%i1) a - ((floor(c / (b + 1))) - a);
                                                c
    (%o1)                         2 a - floor(-----)
                                              b + 1


Copyright and license
=====================

Copyright © 2014, Scott Pakin

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the
   distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived
   from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
